 '_has_vacuum_properties',
 '_init_item',
 '_is_value_eligible',
 '_items',
 '_name',
 '_serialize_to',
 '_set_item',
 'acquisition',
 'binary_result',
 'core',
 'detectors',
 'energy_filter_settings',
 'gas_injection_systems',
 'instrument',
 'metadata_as_ini',
 'optics',
 'sample',
 'scan_settings',
 'stage_settings',
 'vacuum_properties']

In [364]: vision_toolkit.plot_match(image, template, l.center_in_pixels)

In [365]: from liftout.stage_movement import *

In [366]: ?

IPython -- An enhanced Interactive Python
=========================================

IPython offers a fully compatible replacement for the standard Python
interpreter, with convenient shell features, special commands, command
history mechanism and output results caching.

At your system command line, type 'ipython -h' to see the command line
options available. This document only describes interactive features.

GETTING HELP
------------

Within IPython you have various way to access help:

  ?         -> Introduction and overview of IPython's features (this screen).
  object?   -> Details about 'object'.
  object??  -> More detailed, verbose information about 'object'.
  %quickref -> Quick reference of all IPython specific syntax and magics.
  help      -> Access Python's own help system.

If you are in terminal IPython you can quit this screen by pressing `q`.


MAIN FEATURES
-------------

* Access to the standard Python help with object docstrings and the Python
  manuals. Simply type 'help' (no quotes) to invoke it.

* Magic commands: type %magic for information on the magic subsystem.

* System command aliases, via the %alias command or the configuration file(s).


In [367]: z_corrected_stage_movement?
Signature: z_corrected_stage_movement(expected_z, stage_tilt)
Docstring:
Stage movement in Z, corrected for tilt of sample surface plane.

Parameters
----------
expected_z : in meters
stage_tilt : in radians

Returns
-------
StagePosition
    Stage position to pass to relative movement function.
File:      c:\users\admin\microscope\demarcolab\liftout\liftout\stage_movement.p
y
Type:      function

In [368]: microscope.auto_functions.run_auto_focus()

In [369]: z_diff = 4.0 - 3.7040

In [370]: z_diff
Out[370]: 0.2959999999999998

In [371]: z_move = z_corrected_stage_movement(z_diff, stage.current_position.t)
     ...:

In [372]: z_move
Out[372]: StagePosition(x=0,y=-0.13437881,z=0.26373914)

In [373]: z_corrected_stage_movement?
Signature: z_corrected_stage_movement(expected_z, stage_tilt)
Docstring:
Stage movement in Z, corrected for tilt of sample surface plane.

Parameters
----------
expected_z : in meters
stage_tilt : in radians

Returns
-------
StagePosition
    Stage position to pass to relative movement function.
File:      c:\users\admin\microscope\demarcolab\liftout\liftout\stage_movement.p
y
Type:      function

In [374]: z_diff = 4.0e-3 - 3.7040e-3

In [375]: z_move = z_corrected_stage_movement(z_diff, stage.current_position.t)
     ...:

In [376]: z_move
Out[376]: StagePosition(x=0,y=-0.00013437881,z=0.00026373914)

In [377]: stage.relative_move(z_move)

In [378]: new_electron_image(microscope)
Out[378]: AdornedImage(width=1536,height=1024,bit_depth=8)

In [379]: stage.current_position.z
Out[379]: 0.004000023507047109

In [380]: z_move = z_corrected_stage_movement(-z_diff, stage.current_position.t
     ...: )

In [381]: stage.relative_move(z_move)

In [382]: eb =  new_electron_image(microscope)

In [383]: # original position

In [384]: stage.current_position
Out[384]: StagePosition(x=-0.0025732756,y=0.003097,z=0.0037039998,t=0.47122989,r
=5.0614624)

In [385]: z_diff = 3.9e-3 - 3.7040e-3

In [386]: z_diff = 3.9e-3 - 3.700e-3

In [387]: z_diff
Out[387]: 0.00019999999999999966

In [388]: microscope.auto_functions.auto_focus()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-388-74db94d11910> in <module>
----> 1 microscope.auto_functions.auto_focus()

AttributeError: 'AutoFunctions' object has no attribute 'auto_focus'

In [389]: dir(microscope.auto_functions)
Out[389]:
['_AutoFunctions__application_client',
 '_AutoFunctions__id',
 '__class__',
 '__delattr__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__slots__',
 '__str__',
 '__subclasshook__',
 'run_auto_cb',
 'run_auto_focus',
 'run_auto_lens_alignment',
 'run_auto_source_tilt',
 'run_auto_stigmator',
 'run_auto_stigmator_centering']

In [390]: microscope.auto_functions.run_auto_focus()

In [391]: eb = new_electron_image(microscope)

In [392]: stage.current_position
Out[392]: StagePosition(x=-0.0025732756,y=0.003097,z=0.0037039998,t=0.47122989,r
=5.0614624)

In [393]: microscope.auto_functions.run_auto_focus()

In [394]: eb = new_electron_image(microscope)

In [395]: wd = 4.1e-3

In [396]: stage.current_position.z
Out[396]: 0.004100074070480503

In [397]: stage.current_position.z - 3.9e-3
Out[397]: 0.00020007407048050312

In [398]: z_diff = -stage.current_position.z - 3.9e-3

In [399]: z_diff
Out[399]: -0.008000074070480503

In [400]: z_move = z_corrected_stage_movement(z_diff, stage.current_position.t)
     ...:

In [401]: z_move
Out[401]: StagePosition(x=0,y=0.0036318934,z=-0.0071281509)

In [402]: stage.relative_move(z_move)
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-402-6cae8b1c9d07> in <module>
----> 1 stage.relative_move(z_move)

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_sdb_microscope
_client\sdb_microscope\specimen\_stage.py in relative_move(self, position_delta,
 settings)
     66             call_request.parameters.data_types = [DataTypeDefinition(Dat
aType.STRUCTURE_PRIMARY_ID, secondary_id="StagePosition")]
     67             call_request.parameters.values = [position_delta]
---> 68             call_response = self.__application_client._perform_call(call
_request)
     69         elif isinstance(position_delta, StagePosition) and isinstance(se
ttings, MoveSettings):
     70             call_request.parameters.data_types = [DataTypeDefinition(Dat
aType.STRUCTURE_PRIMARY_ID, secondary_id="StagePosition"), DataTypeDefinition(Da
taType.STRUCTURE_PRIMARY_ID, secondary_id="MoveSettings")]

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_sdb_microscope
_client\sdb_microscope_client.py in _perform_call(self, call_request)
    164
    165         try:
--> 166             call_response = self.__endpoint.perform_call(call_request)
    167         except ApiException as api_exception:
    168             ApplicationClientLoggingHelper.log_call_error(call_request.w
ide_call_id, api_exception)

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_core\orc\engin
es.py in perform_call(self, call_request)
    183
    184                     # waits for a corresponding call response, throwing
an exception when an unrecoverable error occurs
--> 185                     call_response = self.__wait_for_call_response(call_r
equest)
    186
    187                     # throws an exception when call response was receive
d properly, but the call was not successful

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_core\orc\engin
es.py in __wait_for_call_response(self, call_request)
    487
    488         while True:
--> 489             message = self.__receive_message_directly(self.__socket)
    490
    491             if message.type == MessageType.CALL_RESULT or message.type =
= MessageType.CALL_ERROR:

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_core\orc\engin
es.py in __receive_message_directly(self, socket)
    437         """
    438
--> 439         frame = socket.receive_frame()
    440         message = MessageDeserializer.deserialize_message(frame.content)

    441         return message

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_core\framed_tr
ansport.py in receive_frame(self)
     98         try:
     99             while True:
--> 100                 frame = self._receive_frame_synchronously()
    101                 if frame.type == FrameType.DATA:
    102                     break

c:\users\admin\anaconda3\envs\fibsem\lib\site-packages\autoscript_core\framed_tr
ansport.py in _receive_frame_synchronously(self)
    137         """
    138         try:
--> 139             header_bytes = self._tcp_socket.recv(Frame.HEADER_LENGTH)
    140         except Exception as ex:
    141             raise TcpStreamIoException("An error occurred when reading d
ata from TCP stream.", ex) from ex

KeyboardInterrupt:

In [403]: